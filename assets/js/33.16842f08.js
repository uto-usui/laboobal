(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{327:function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));n(105),n(106);var i=n(20),r=n(29),s=function(){function e(t,n,r){Object(i.a)(this,e),this.target=t,this.eventType=n,this.listen(r)}return Object(r.a)(e,[{key:"listen",value:function(e){this._eventRemovers||(this._eventRemovers=[]),this.target.addEventListener(this.eventType,e);var t=this;this._eventRemovers.push({remove:function(){t.target.removeEventListener(t.eventType,e)}})}},{key:"destroy",value:function(){this._eventRemovers&&(this._eventRemovers.forEach((function(e){e.remove()})),console.log("destroy",this.target,this.eventType))}}]),e}();t.b=s},343:function(e,t,n){var i=n(2),r=n(5),s=n(108),o=[].slice,a=function(e){return function(t,n){var i=arguments.length>2,r=i?o.call(arguments,2):void 0;return e(i?function(){("function"==typeof t?t:Function(t)).apply(this,r)}:t,n)}};i({global:!0,bind:!0,forced:/MSIE .\./.test(s)},{setTimeout:a(r.setTimeout),setInterval:a(r.setInterval)})},386:function(e,t,n){"use strict";t.a="#define GLSLIFY 1\nattribute vec3 position;\nattribute vec2 uv;\n\nvarying vec2 vUv;\n\nvoid main(void) {\nvUv = uv;\ngl_Position = vec4(position, 1.0);\n}\n"},387:function(e,t,n){},434:function(e,t,n){"use strict";var i=n(20),r=n(29),s=n(344),o=function(){function e(t,n){return Object(i.a)(this,e),this.width=t,this.height=n,this.uniforms={resolution:{type:"v2",value:new s.Vector2(this.width,this.height)},imageResolution:{type:"v2",value:null},texture:{type:"t",value:null}},this.mesh=null,this.geometry=null,this.material=null,this}return Object(r.a)(e,[{key:"init",value:function(e,t){var n=this,i=new s.TextureLoader;i.crossOrigin="Anonymous",i.load(e,(function(e){e.magFilter=e.minFilter=s.LinearFilter,n.uniforms.imageResolution.value=new s.Vector2(e.image.width,e.image.height),n.uniforms.texture.value=e,n.mesh=n.createMesh(),t()}))}},{key:"createMesh",value:function(){return this.geometry=new s.PlaneBufferGeometry(2,2),this.material=new s.RawShaderMaterial({uniforms:this.uniforms,vertexShader:"#define GLSLIFY 1\nattribute vec3 position;\nattribute vec2 uv;\n\nvarying vec2 vUv;\n\nvoid main(void) {\nvUv = uv;\ngl_Position = vec4(position, 1.0);\n}\n",fragmentShader:"precision highp float;\n#define GLSLIFY 1\n\nuniform vec2 resolution;\nuniform vec2 imageResolution;\nuniform sampler2D texture;\n\nvarying vec2 vUv;\n\nvoid main() {\n\n// 画角の調整\nvec2 ratio = vec2(\n    min((resolution.x / resolution.y) / (imageResolution.x / imageResolution.y), 1.0),\n    min((resolution.y / resolution.x) / (imageResolution.y / imageResolution.x), 1.0)\n  );\nvec2 uv = vec2(\n    vUv.x * ratio.x + (1.0 - ratio.x) * 0.5,\n    vUv.y * ratio.y + (1.0 - ratio.y) * 0.5\n  );\n\ngl_FragColor = texture2D(texture, uv);\n}\n"}),new s.Mesh(this.geometry,this.material)}},{key:"resize",value:function(){this.uniforms.resolution.value.set(this.width,this.height)}},{key:"destroy",value:function(){this.geometry.dispose(),this.material.dispose()}}]),e}();t.a=o},479:function(e,t,n){"use strict";var i=n(387);n.n(i).a},565:function(e,t,n){"use strict";n.r(t);n(105),n(106),n(343);var i=n(20),r=n(29),s=n(344),o=n(327),a=n(434),v=n(386),c=function(){function e(t,n,r){Object(i.a)(this,e),this.width=n,this.height=r,this.texture=t,this.uniforms={time:{type:"f",value:0},resolution:{type:"v2",value:new s.Vector2(this.width,this.height)},texture:{type:"t",value:this.texture}},this.createMesh()}return Object(r.a)(e,[{key:"createMesh",value:function(){this.geometry=new s.PlaneBufferGeometry(2,2),this.material=new s.RawShaderMaterial({uniforms:this.uniforms,vertexShader:v.a,fragmentShader:"precision highp float;\n#define GLSLIFY 1\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\nvec3 mod289(vec3 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\n    vec4 mod289(vec4 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n   return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise3(vec3 v) {\n    const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n    const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n    // First corner\n    vec3 i  = floor(v + dot(v, C.yyy) );\n    vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n    // Other corners\n    vec3 g_0 = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g_0;\n    vec3 i1 = min( g_0.xyz, l.zxy );\n    vec3 i2 = max( g_0.xyz, l.zxy );\n\n    //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n    //   x1 = x0 - i1  + 1.0 * C.xxx;\n    //   x2 = x0 - i2  + 2.0 * C.xxx;\n    //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n    vec3 x1 = x0 - i1 + C.xxx;\n    vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n    vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n    // Permutations\n    i = mod289(i);\n    vec4 p = permute( permute( permute(\n               i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n             + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n             + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n    // Gradients: 7x7 points over a square, mapped onto an octahedron.\n    // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n    float n_ = 0.142857142857; // 1.0/7.0\n    vec3  ns = n_ * D.wyz - D.xzx;\n\n    vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n    vec4 x = x_ *ns.x + ns.yyyy;\n    vec4 y = y_ *ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n\n    vec4 b0 = vec4( x.xy, y.xy );\n    vec4 b1 = vec4( x.zw, y.zw );\n\n    //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n    //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n    vec4 s0 = floor(b0)*2.0 + 1.0;\n    vec4 s1 = floor(b1)*2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n\n    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n    vec3 p0 = vec3(a0.xy,h.x);\n    vec3 p1 = vec3(a0.zw,h.y);\n    vec3 p2 = vec3(a1.xy,h.z);\n    vec3 p3 = vec3(a1.zw,h.w);\n\n    //Normalise gradients\n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n\n    // Mix final noise value\n    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n    m = m * m;\n    return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );\n}\n\n// vec2 random value (0.xxxxxxx)\nfloat random(vec2 co){\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nconst float interval = 3.0;\n\nuniform float time;\nuniform vec2 resolution;\nuniform sampler2D texture;\n\nvarying vec2 vUv;\n\n// start script\nvoid main(void) {\n\n    // 強さ\n    // repeat timing - (time / repeat timing)の剰余 が repeat timing を元にした間隔の間の値のエルミート補完値\n    // 時間軸に合わせて強さが変化するように\n    float strength = smoothstep(interval * .95, interval, interval - mod(time, interval));\n\n    // 揺れ\n    vec2 shake = vec2(strength * 8.0 + 0.1) * vec2(\n      random(vec2(time)) * .01 - 1.0, // 横揺れ\n      random(vec2(sqrt(time))) * .01 - 2.0 // 縦揺れ\n    ) / resolution;\n\n    // y 座標\n    float y = vUv.y * resolution.y;\n\n    // y 軸走査線\n    float rgbWave = (\n        snoise3(vec3(0.0, y * 0.01, time * 400.0)) * (2.0 + strength * 2.0) // ビリビリ\n        + step(0.9999, sin(y * 0.005 + time * 2.0 + snoise3(vec3(strength, y * 0.1, time * time) * .1) )) * 5.0 // line\n        + step(0.9997, cos(y * 0.01 + time * 1.2)) * -10.0\n     // + step(太さ,    cos(y * 速さ   + time * 速さ)) * 範囲のずれ\n      ) / resolution.x;\n    float rgbUvX = vUv.x + rgbWave;\n\n    // x 軸への rgb ずれ\n    // strength 部分を外すと大きなずれがなくなる\n    //               基準                           シェイクさせる           最大値の歪み              ピクピク度\n    float rgbDiff = (100.0 * sin(time * .1) * .5 * strength + sin(time * 50.0 + vUv.y * 1.1) * (10.0 * strength + 1.0)) / resolution.x;\n\n    // rgb マスター\n    float r = texture2D(texture, vec2(rgbUvX + rgbDiff, vUv.y) + shake).r;\n    float g = texture2D(texture, vec2(rgbUvX, vUv.y)).g;\n    float b = texture2D(texture, vec2(rgbUvX - rgbDiff, vUv.y) + shake).b;\n\n    // white noise\n    float whiteNoise = (random(vUv + mod(time, 10.0)) * 2.0 - 1.0) * (0.15 + strength * 0.15) * .2;\n\n    // block noise\n    float bnTime = floor(time * 20.0) * 2.0;\n    float noiseX = step((snoise3(vec3(0.0, vUv.x * 3.0, bnTime)) + 1.0) / 2.5, 0.1 + strength * 1.3);\n    float noiseY = step((snoise3(vec3(0.0, vUv.y * 3.0, bnTime)) + 1.0) / 2.0, 0.1 + strength * 0.3);\n    float bnMask = noiseX * noiseY;\n    float bnUvX = vUv.x + sin(bnTime) * 0.1 + rgbWave;\n    float bnR = texture2D(texture, vec2(bnUvX + rgbDiff, vUv.y)).r * bnMask;\n    float bnG = texture2D(texture, vec2(bnUvX, vUv.y)).g * bnMask;\n    float bnB = texture2D(texture, vec2(bnUvX - rgbDiff, vUv.y)).b * bnMask;\n    vec4 blockNoise = vec4(bnR, bnG, bnB, 1.0);\n\n    float bnTime2 = floor(time * 25.0) * 3.0;\n    float noiseX2 = step((snoise3(vec3(0.0, vUv.x * 2.0, bnTime2)) + 1.0) / 2.0, 0.1 + strength * 0.5);\n    float noiseY2 = step((snoise3(vec3(0.0, vUv.y * 8.0, bnTime2)) + 1.0) / 2.5, 0.1 + strength * 0.3);\n    float bnMask2 = noiseX2 * noiseY2;\n    float bnR2 = texture2D(texture, vec2(bnUvX + rgbDiff, vUv.y)).r * bnMask2;\n    float bnG2 = texture2D(texture, vec2(bnUvX, vUv.y)).g * bnMask2;\n    float bnB2 = texture2D(texture, vec2(bnUvX - rgbDiff, vUv.y)).b * bnMask2;\n    vec4 blockNoise2 = vec4(bnR2, bnG2, bnB2, 1.0);\n\n    float waveNoise = (sin(vUv.y * 1.0) + .1) / 2.0 * (0.15 + strength * 0.2);\n\n    gl_FragColor = vec4(r, g, b, 1.0) * (1.0 - bnMask - bnMask2) + (whiteNoise + blockNoise + blockNoise2 + waveNoise);\n\n}\n"}),this.mesh=new s.Mesh(this.geometry,this.material)}},{key:"render",value:function(e){this.uniforms.time.value+=e}},{key:"resize",value:function(){this.uniforms.resolution.value.set(this.width,this.height)}},{key:"destroy",value:function(){this.geometry.dispose(),this.material.dispose()}}]),e}(),h=function(){function e(t){var n=t.canvas,r=t.wrap;Object(i.a)(this,e),this.canvas=n,this.wrap=r,this.wrapperW=this.wrap.offsetWidth,this.wrapperH=this.wrap.offsetHeight,this.scene=new s.Scene,this.sceneBg=new s.Scene,this.clock=new s.Clock,this.animId=0,this._eventList=[],this.init()}return Object(r.a)(e,[{key:"init",value:function(){this.createRenderer(),this.createCamera(),this.createMesh(),this.eventAttach(),this.resizeWindow(),this.render()}},{key:"createMesh",value:function(){var e=this;this.bgImg=new a.a(this.wrapperW,this.wrapperH),this.postEffect=new c(this.renderBg.texture,this.wrapperW,this.wrapperH),this.bgImg.init("https://images.unsplash.com/photo-1547962041-6d2d7c4bdf6e",(function(){e.sceneBg.add(e.bgImg.mesh),e.scene.add(e.postEffect.mesh)}))}},{key:"createRenderer",value:function(){this.renderBg=new s.WebGLRenderTarget(this.wrapperW,this.wrapperH),this.renderer=new s.WebGLRenderer({antialias:!1,canvas:this.canvas}),this.renderer.setSize(this.wrapperW,this.wrapperH),this.renderer.setClearColor(1118481,1)}},{key:"createCamera",value:function(){this.camera=new s.OrthographicCamera(-1,1,1,-1,0,1),this.cameraBack=new s.PerspectiveCamera(45,this.wrapperW/this.wrapperH,1,1e4),this.cameraBack.position.set(0,0,100),this.cameraBack.lookAt(new s.Vector3)}},{key:"render",value:function(){var e=this;this.renderer.setRenderTarget(this.renderBg),this.renderer.render(this.sceneBg,this.cameraBack),this.postEffect.render(this.clock.getDelta()),this.renderer.setRenderTarget(null),this.renderer.render(this.scene,this.camera);this.animId=requestAnimationFrame((function(){return e.render()}))}},{key:"eventAttach",value:function(){var e=this;this._eventList.push(new o.b(window,"resize",(function(){return t=function(){e.resizeWindow()},n=1e3/30,function(e){clearTimeout(i),i=setTimeout((function(){t(e)}),n)};var t,n,i})))}},{key:"eventRemove",value:function(){this._eventList.forEach((function(e){return e.destroy()}))}},{key:"resizeWindow",value:function(){this.canvas.width=this.wrapperW,this.canvas.height=this.wrapperH,this.cameraBack.aspect=this.wrapperW/this.wrapperH,this.cameraBack.updateProjectionMatrix(),this.bgImg.resize(),this.postEffect.resize(),this.renderBg.setSize(this.wrapperW,this.wrapperH),this.renderer.setSize(this.wrapperW,this.wrapperH)}},{key:"destroy",value:function(){this.sceneBg.remove(this.bgImg.mesh),this.scene.remove(this.postEffect.mesh),cancelAnimationFrame(this.animId),this.bgImg.destroy(),this.postEffect.destroy(),this.eventRemove()}}]),e}();var u={name:"GlitchImage",data:function(){return{glitch:null}},mounted:function(){this.glitch=new h({canvas:this.$refs.canvas,wrap:this.$refs.wrap})},beforeDestroy:function(){this.glitch.destroy()}},l=(n(479),n(28)),m=Object(l.a)(u,(function(){var e=this.$createElement,t=this._self._c||e;return t("div",{ref:"wrap",staticClass:"wrap"},[t("canvas",{ref:"canvas",staticClass:"canvas",attrs:{id:"canvas"}})])}),[],!1,null,"02d57102",null);t.default=m.exports}}]);